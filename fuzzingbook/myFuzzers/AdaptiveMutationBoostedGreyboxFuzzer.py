import random
import pickle  # serializes an object by producing a byte array from all the information in the object
import hashlib # produces a 128-bit hash value from a byte array
from fuzzingbook.Fuzzer import PrintRunner
import numpy as np
import pickle  # serializes an object by producing a byte array from all the information in the object
import hashlib # produces a 128-bit hash value from a byte array


class AFLFastSchedule(object):
    def __init__(self, exponent):
        self.exponent = exponent
        self.path_frequency = {}

    def assignEnergy(self, population):
        """Assign exponential energy inversely proportional to path frequency"""
        for seed in population:
            seed.energy = 1 / (self.path_frequency[getPathID(seed.coverage)] ** self.exponent)

    def normalizedEnergy(self, population):
        """Normalize energy"""
        energy = list(map(lambda seed: seed.energy, population))
        sum_energy = sum(energy)  # Add up all values in energy
        norm_energy = list(map(lambda nrg: nrg / sum_energy, energy))
        return norm_energy

    def choose(self, population):
        """Choose weighted by normalized energy."""
        import numpy as np

        self.assignEnergy(population)
        norm_energy = self.normalizedEnergy(population)
        seed = np.random.choice(population, p=norm_energy)
        return seed

def getPathID(coverage):
    """Returns a unique hash for the covered statements"""
    pickled = pickle.dumps(coverage)
    return hashlib.md5(pickled).hexdigest()

class UCB1Mutator(object):
    def __init__(self):
        self.mutators = [
            self.delete_random_character,
            self.insert_random_character,
            self.flip_random_character
        ]

    def insert_random_character(self,s):
        """Returns s with a random character inserted"""
        pos = random.randint(0, len(s))
        random_character = chr(random.randrange(32, 127))
        return s[:pos] + random_character + s[pos:]

    def delete_random_character(self,s):
        """Returns s with a random character deleted"""
        if s == "":
            return self.insert_random_character(s)

        pos = random.randint(0, len(s) - 1)
        return s[:pos] + s[pos + 1:]

    def flip_random_character(self,s):
        """Returns s with a random bit flipped in a random position"""
        if s == "":
            return self.insert_random_character(s)

        pos = random.randint(0, len(s) - 1)
        c = s[pos]
        bit = 1 << random.randint(0, 6)
        new_c = chr(ord(c) ^ bit)
        return s[:pos] + new_c + s[pos + 1:]

    def mutate(self, inp, mutator_id=None):
        """Return s with a mutation specified by mutator_id applied"""
        if mutator_id is None:
            mutator = random.choice(self.mutators)
        else:
            mutator = self.mutators[mutator_id]
        return mutator(inp)

class AdaptiveMutationBoostedGreyboxFuzzer():
    def __init__(self, seeds, mutator=UCB1Mutator(), schedule=AFLFastSchedule(5)):
        self.seeds = seeds
        self.mutator = mutator
        self.schedule = schedule
        self.inputs = []
        self.explorationConstant = 1
        self.reset()
        self.decay = 0.9

    def reset(self):
        """Reset path frequency"""
        self.population = list(map(lambda x: Seed(x), self.seeds))
        self.seed_index = 0
        self.coverages_seen = set()
        self.population = [] # population is filled during greybox fuzzing
        self.schedule.path_frequency = {}
        self.path_mutation_frequency = {}

    # select seed: input that activates less frequent path is more likely to be selected
    # select mutation on seed
    def create_candidate(self):
        """Returns an input generated by fuzzing a seed in the population"""
        seed = self.schedule.choose(self.population)

        # Stacking: Apply multiple mutations to generate the candidate
        candidate = seed.data
        # by the time we run create_candidate,
        # all seeds have been ran at least once, so seed.coverage is defined
        pathID = getPathID(seed.coverage)
        # retrieve mutation history for pathID
        # {mutationID: [sum of rewards, number of hits]}
        if pathID not in self.path_mutation_frequency:
            # never hit this path before
            self.path_mutation_frequency[pathID] = {}
            for mut_index in range(len(self.mutator.mutators)):
                self.path_mutation_frequency[pathID][mut_index] = [0, 0]
        mutationHistoryDict = self.path_mutation_frequency[pathID]
        # print(pathID)
        # print(mutationHistoryDict)
        pathIDTotalHits = 0
        for mut_list in mutationHistoryDict.values():
            pathIDTotalHits += mut_list[1]
        # print(pathIDTotalHits)
        # select mutation id using UCB
        maximumUCBValue = -np.inf
        selected_mutation_id = -1
        # to break ties by random
        mutator_id_list = list(range(len(self.mutator.mutators)))
        random.shuffle(mutator_id_list)
        for mut_index in mutator_id_list:
            if mutationHistoryDict[mut_index][1] == 0:
                selected_mutation_id = mut_index
                break
            else:
                averagedReward = mutationHistoryDict[mut_index][0]/mutationHistoryDict[mut_index][1]
                UCBValue = averagedReward + self.explorationConstant * np.sqrt(np.log(pathIDTotalHits)/mutationHistoryDict[mut_index][1])
                if UCBValue >= maximumUCBValue:
                    maximumUCBValue = UCBValue
                    selected_mutation_id = mut_index
        assert selected_mutation_id != -1
        # print(selected_mutation_id)
        trials = min(len(candidate), 1 << random.randint(1, 5))
        for i in range(trials):
            candidate = self.mutator.mutate(candidate, selected_mutation_id)
            # candidate = self.mutator.mutate(candidate)
        return pathID, candidate, selected_mutation_id

    def fuzz(self):
        """Returns first each seed once and then generates new inputs"""
        if self.seed_index < len(self.seeds):
            # Still seeding
            inp = self.seeds[self.seed_index]
            self.seed_index += 1
            self.inputs.append(inp)
            mutation_id = -1
            return None, inp, mutation_id
        else:
            # Mutating
            seed_PathID, inp, mutation_id = self.create_candidate()
            self.inputs.append(inp)

            return seed_PathID, inp, mutation_id

    def run(self, runner):
        """Inform scheduler about path frequency"""
        seed_PathID, inp, mutation_id = self.fuzz()
        result, outcome = runner.run(inp)
        new_coverage = frozenset(runner.coverage())

        reward = 0

        if new_coverage not in self.coverages_seen:
            reward = 1
            # We have new coverage
            seed = Seed(inp)
            seed.coverage = runner.coverage()
            self.coverages_seen.add(new_coverage)
            self.population.append(seed)
        path_id = getPathID(runner.coverage())
        if seed_PathID is None:
            seed_PathID = path_id
        if not path_id in self.schedule.path_frequency:
            self.schedule.path_frequency[path_id] = 1
        else:
            self.schedule.path_frequency[path_id] = self.schedule.path_frequency[path_id] + 1

        if seed_PathID not in self.path_mutation_frequency:
            # print("??????")
            # never hit this path before
            self.path_mutation_frequency[seed_PathID] = {}
            for mut_index in range(len(self.mutator.mutators)):
                if mut_index == mutation_id:
                    self.path_mutation_frequency[seed_PathID][mut_index] = [reward, 1]
                else:
                    self.path_mutation_frequency[seed_PathID][mut_index] = [0, 0]
        else:
            # has hit this path before, not sure whether has used this mutation before
            if mutation_id != -1:
                # print("!!!!!")
                # increment number of times path_id, mutation_id pair appears
                self.path_mutation_frequency[seed_PathID][mutation_id][1] = self.decay * self.path_mutation_frequency[seed_PathID][mutation_id][1] + 1
                if reward == 1:
                    # increment number of times path_id, mutation_id pair gives reward 1
                    self.path_mutation_frequency[seed_PathID][mutation_id][0] = self.decay * self.path_mutation_frequency[seed_PathID][mutation_id][0] + 1
                else:
                    self.path_mutation_frequency[seed_PathID][mutation_id][0] = self.decay * \
                                                                                self.path_mutation_frequency[
                                                                                    seed_PathID][mutation_id][0] + 0

        return (result, outcome)

    def runs(self, runner=PrintRunner(), trials=10):
        """Run `runner` with fuzz input, `trials` times"""
        # Note: the list comprehension below does not invoke self.run() for subclasses
        # return [self.run(runner) for i in range(trials)]
        outcomes = []
        for i in range(trials):
            outcomes.append(self.run(runner))
        return outcomes

def getPathID(coverage):
    """Returns a unique hash for the covered statements"""
    pickled = pickle.dumps(coverage)
    return hashlib.md5(pickled).hexdigest()

class Seed(object):
    def __init__(self, data):
        """Set seed data"""
        self.data = data

    def __str__(self):
        """Returns data as string representation of the seed"""
        return self.data

    __repr__ = __str__